{
  
    
        "post0": {
            "title": "RecSys 2022 - My Top 5 Papers",
            "content": "After reading papers from RecSys for several years, I was really happy to be able to (virtually) attend for the first time this year. If you haven‚Äôt heard of it, RecSys is the most important conference for new results in the field of recommender systems research. This was also my first academic conference of any kind! I found the mix of academic and industry talks really balanced each other out well‚Ää-‚Ääit was great to see exciting theory-driven ideas alongside real world implementation stories, with all the engineering problems that come with them. Below are the papers I found most interesting from the main conference, in no particular order. Links to the papers PDFs are included in the sub-titles. . Augmenting Netflix Search with In-Session Adapted Recommendations . . Based on user research, Netflix found that users typically fall into 3 categories when searching for content: . Fetch‚Ää-‚Ääthe user knows exactly what they want, and generally enter a query for an exact film or TV show | Find‚Ää-‚Ääthe user broadly knows the kind of thing they want to see, but it‚Äôs not a fully formed idea‚Ää-‚Ääeg. comedy movies | Explore‚Ää-‚Ääthe user has no fixed idea of what they are looking for, and are open to suggestions | . Based on this, Netflix reasoned that there was an opportunity to present the ‚ÄúExplore‚Äù users with recommendations on the pre-search page. The key point is that these recommendations would need to take into account user interactions from the current session, to align with whatever they might be looking for at the current moment. These kind of recommendations are commonly referred to as ‚ÄúAnticipatory Search‚Äù or ‚ÄúPre-search Recommendations‚Äù. . The authors designed a model to provide recommendations for this use case. This model uses features such as historical user data, context about the user and the session, and well as raw sequences of in-session browsing interactions. Video metadata and embeddings are also used to provide information about the items that are interacted with. . . The authors experimented with different types of deep architectures, including both dense and sparse features. This was coupled with the raw interaction sequence, which they modelled with different types of neural network modules that can accommodate sequence data‚Ää-‚Ääattention blocks, LSTM and GRU. . . They pick out a specific example of how the model reacts to in-session browsing activity. The ranking of the recommendations is influenced by the titles browsed by the user, which they contend should result in a good experience for the user when they navigate to the search page. . . No specifics are mentioned regarding which objectives are used to train the model, or how the model performs when tested online. In offline performance they see a 6% relative increase in ranking metrics against the current production model. I would be interested in hearing more about the cost-benefit tradeoff involved in deploying this model online, due to the large engineering challenge required to make real-time features available to the model at inference time. . Recommendation as Language Processing (RLP): A Unified Pretrain, Personalized Prompt &amp; Predict Paradigm (P5) . This paper borrows heavily from recent advances in NLP models to create a multi-purpose model for different recommendation tasks. . . P5 is directly inspired by the influential T5 paper. T5 applies a unified approach to transfer learning, to effectively learn multiple tasks as part of a text-to-text framework. P5 applies these concepts to recommendation tasks, as shown below. . . The P5 framework allows for the use of prompt templates, which are filled with user interaction data and item metadata, to produce a fully text-based input based on the task described in the prompt. This means that all tasks can be learned simultaneously during pre-training. The authors present very promising results for this architecture compared to other state of the art models. If they can be replicated, this could lead to the use of more multi-purpose, pre-trained models in industry. I for one, look forward to becoming a rockstar prompt engineer! üöÄ . Towards Psychologically-Grounded Dynamic Preference Models . One of the core assumptions in many recommender models is that user preferences are static. But what if a user‚Äôs preferences change due to the items we are showing the user with our recommender system? How could this feedback loop effect what a user wants over time? This paper focuses on a framework for formalising possible user preference changes due to human psychological effects. The best example included is the ‚ÄúMere Exposure Effect‚Äù‚Ää-‚Ääwhich states that people are more likely to develop a preference for something that they are familiar with. This was first described by Robert Zajonc in the 60s‚Ää-‚Äähis experiment included nonsense words on the cover of a student newspaper. When tested, on average the students who read this paper rated the words they had been exposed to as more positive-sounding compared to other nonsense words. How better to explain this all, than a graph with a grumpy cat? üòª . . The authors formalise the mere exposure effect applied to recommendations mathematically, as show on the left. A user‚Äôs initial preferences (œÄ‚Çú) and items (ŒΩ) are both represented as vectors. In response to being recommended an item ŒΩ at time step t+1, the users preference moves from their starting preference vector, along the line the intersects the user‚Äôs baseline preference and the item vectors. This results in the updated preference vector, œÄ‚Çú‚Çä‚ÇÅ. The factor Œ≥ controls how far along this line the preferences move (where Œ≥ œµ [0, 1]). The graph below the equation depicts this in a 2-dimensional preference space. The authors propose similar formulations for Operant Conditioning and Hedonic Adaptation, before including a section on simulations based on these ideas. This includes discussion on how recommenders may achieve different engagement scores in the case where user preferences are dynamic. The ideas in this paper feel some way from making it into most industrial settings anytime soon‚Ää-‚Ääbut a more holistic focus on the role platforms might be playing in moulding user preferences is definitely welcome. . Reusable Self-Attention Recommender Systems in Fashion Industry Applications . Continuing the trend of unifying models‚Ää-‚Äähere engineers at the fashion website Zalando present their work on creating a single recommender model architecture that can be reused for several tasks, using the now ever-present Transformer architecture. . . The authors unified the training datasets previously fed into separate models, and used them to train a recommender architecture that can be re-used for 3 different tasks: outfit ranking, outfit recommendation, real-time and personalised outfit generation. For the different subtasks, small changes are made to the Transformer architecture, and boolean masking is used to hide labels not relevant to the use case the model is being trained for. The inclusion of contextual data also allows the model to work with semi-cold start users, who may have fewer significant interactions with items, as well as fully-cold start users with no item interactions, who can be predicted based on contextual data alone. The model is able to learn from different interaction types due to a one-hot encoding of the interaction type. In addition, a simple integer of days-since-interaction allows the model to balance long and short term interests.¬† In A/B testing the authors report increases in user engagement compared to the previous deployed algorithms of between 5‚Äì130%. . Streaming Session-Based Recommendation: When Graph Neural Networks meet the Neighborhood . I found this paper intriguing for the insight it gives into some methodology issues present in the recommender system literature.¬† A recent focus of the RecSys field has been session-based recommendations‚Ää-‚Ääproviding recommendations to users using in-session signals. Several deep learning model architectures have been proposed to address this task.¬† The authors of this papers compared one of these complex approaches against some more simple baselines: . VSKNN+‚Ää-‚Ääa session-based nearest neighbour approach. Finds past sessions that are similar to the current session. Items that appear in these similar sessions are used as recommendation candidates. The authors add an extension to the base VSKNN algorithm, that considers each user‚Äôs past sessions | SR+‚Ää-‚Ää‚ÄùSequential Rules‚Äù, a variation of association rule learning. A rule is created when an item p appears after item q in a session, where the weight of the rule is a function of the number of items between p and q in the interaction sequence. The authors again extend this method to consider each user‚Äôs past sessions | GAG‚Ää-‚Ääan approached based on a Graph Neural Network | . . The final findings are shown in the table above, are that a hybrid approach (which simply combines the recommended items produced by VSKNN+ and SR+) performs better than GAG across all metrics and datasets the authors tested. Neither of these baselines were used as comparisons in the original paper that proposed GAG. .",
            "url": "https://sam-watts.github.io/blog/ml/recsys/2022/10/10/recys-2022-top-5.html",
            "relUrl": "/ml/recsys/2022/10/10/recys-2022-top-5.html",
            "date": " ‚Ä¢ Oct 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "üö¢ Debugging for Dockerized ML applications in Python",
            "content": "Docker has become ubiquitous in ML applications in the last few years. It can enable easy collaboration between engineers with different hardware ‚Äî as well as easing the transition from prototyping on personal laptops to compute clusters in production. On the flip side, it introduces an extra layer of complexity for engineers to work with when developing and maintaining productionised models. . In my professional work, I‚Äôve found debugging to be one of the things made harder by this extra layer of complexity. In this post I‚Äôm going to outline my current setup with VSCode and debugpy that greatly simplifies this process when applied to a model training application. . Why do we need this? . When debugging code, we want to be able to inspect its environment at runtime as accurately as possible. Any deviation from this can lead to fixes that plainly don‚Äôt work in the runtime environment. . Whilst getting to grips with Docker, my debugging process would generally entail recreating the scaffolding around the Python script that I wanted to inspect in my local development environment, and then debugging that script directly. In model training applications that contain bash scripts, multiple entrypoints and use of environment variables, this can quickly add a large development overhead. With this added complexity comes the increased chance of errors creeping in, rendering the whole process slow and frustrating. . So how do we avoid this? We need a debugging system that can interact with Docker, and let our code run as it was designed to! . The Solution . What worked best in the end for me is a debugger that can connect to a Docker container where your model training application is running, and directly inspect the environment of a given Python script. . This is where debugpy comes in! . Previously known as ptvsd, this package is developed by Microsoft specifically for use in VSCode with Python. It implements all of the common debugging tools you would expect, as well as allowing for attaching to remote environments, such as Docker containers or even remote machines via SSH. . As an aside, debugpy implements the Debug Adapter Protocol (DAP), which is a standardised way for development tools to communicate with debuggers. . Using debugpy with Docker containers is wonderfully simple, and requires 3 distinct steps. I‚Äôll dive into each of these in turn, before demonstrating the whole process afterwards. . Configuring debugpy in Python | Configuring the connection to the Docker container | Setting up breakpoints | 1. Configuring debugpy in Python . In the script you would like to debug, the following snippet should be added before any other code. . import debugpy debugpy.listen((&quot;0.0.0.0&quot;, 5678)) print(&quot;Waiting for client to attach...&quot;) debugpy.wait_for_client() . This will setup debugpy to listen on port 5678 for a client to attach, and will also pause the execution until a client connects via that port. . 2. Configuring the connection to the Docker container . Now we have our Python script configured, we need to make sure the VSCode debugger client can connect to debugpy when it is running inside a Docker container. . Firstly, when you run your Docker container, the port that debugpy is listening on must be mapped to a local port . docker run -p 5678:5678 # map container port to local port temp-container . Secondly, we need to create a launch.json file to configure how the local VSCode debugging client will run. This minimal example tells the debugger to attach to port 5678, which will be mapped to the Docker port of the same number when we run the container. . { &quot;version&quot;:&quot;0.2.0&quot;, &quot;configurations&quot;:[ { &quot;name&quot;:&quot;Python: Docker Attach&quot;, &quot;type&quot;:&quot;python&quot;, &quot;request&quot;:&quot;attach&quot;, &quot;connect&quot;:{ &quot;host&quot;:&quot;localhost&quot;, &quot;port&quot;:5678 }, &quot;pathMappings&quot;:[ { &quot;localRoot&quot;:&quot;${workspaceFolder}&quot;, &quot;remoteRoot&quot;:&quot;.&quot; } ] } ] } . 3. Setting up breakpoints . I was surprised when I first tried this that when you set breakpoints via the VSCode UI on the local version of a Python script, that will correspond to the copied scripts that run inside your Docker container! Pure wizardry from VSCode. . In addition, you can also use debugpy.breakpoint() to explicitly set breakpoints via the debugpy API. An additional benefit of this is that these calls will be ignored if you exclude the debugpy configuration mentioned in step (1), providing a quick way of temporarily removing debugging. . Debugging in action . You should be good to go! The steps to debug are: . Add breakpoints in the UI | Rebuild and run the Docker container | Connect the debugger | . The full code used for this example can be found below. Happy debugging! üòÉ . GitHub - sam-watts/vscode-docker-debugging: A template for debugging long running, dockerized programs in python with vscode . Links . debugpy Github: https://github.com/microsoft/debugpy | Docker run reference: https://docs.docker.com/engine/reference/run/ | .",
            "url": "https://sam-watts.github.io/blog/ml/python/2021/07/31/debugging-dockerized-ml-python.html",
            "relUrl": "/ml/python/2021/07/31/debugging-dockerized-ml-python.html",
            "date": " ‚Ä¢ Jul 31, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "",
          "url": "https://sam-watts.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://sam-watts.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}